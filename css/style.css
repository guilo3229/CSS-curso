/* Regla CSS consta de 2 partes
1) el selector
2)bloque de declaraciones:{

  atributos:valor;
  atributo-de-mas-dos-palabras:otro-valor
} */
/* son mala pra¬¥ctica porque son bloqueantes a la hora de que el navegador lee esta instrucci√≥n, enc ss normalito en SASS no hay manera ojo!! */
@import url("otra-hoja.css");

h1{
  color: orangered;
  background-color: black ;
}

/* 
links de referencia y documentacion::
    - https: //es.wikipedia.org/wiki/Hoja_de...
    - https: //www.w3.org/html/logo/
    - https: //www.w3.org/standards/webdesig...
    - https: //www.w3.org/TR/css-2020/
    - https: //developer.mozilla.org/es/docs...

*/


/* 
Selectores B√°sicos
1)Etiquetas-Elementos html
2)identificadores-atributo - id - #
3)clases - atributo class - . */
p{
  color: midnightblue;
}
/* Dar estilos con Id se considera un AntiPatron es una mala practica, porque ese id es unico ya que no puedo ponerlke ese id a otro elemento, por ejemplo las clases si que dejaria entonces no es optimo, el id es solo para lo unico mala practica en el 99%, tambien tiene un mayor peso sobre los otros selectores y puede crear conflictos */
#parrafo-dos{
  background-color: skyblue;

}
/* Dar estilos con clases nos permite reutilizar nuestro codigo CSS, el nombre de las clases para dise√±o css tienen que ser descriptivos para saber que hace cada uno  */

/* Si trabajas tus clases de forma alfabetica es bueno para tener un orden */

.bg-skyblue{
  background-color: skyblue;
}
.bg-steelblue{
  background-color: steelblue;
}
.text-20{
  font-size: 20px;
}
.text-32{
  font-size: 32px;
}

.text-white{
  color: white;
}
/* Para aplicar estilos a hijos directos se pone la clase luego el mayor que y el nombre de los hijos directos de referencia, solo sirve para hijo directo de primer nivel*/
.hijos-directos > li {
  background-color: thistle;

}
/* para todos los hijos es decir descendientes y directos usaremos un espacio entre la clase y el elmento hijo  */
.hijos-descendientes b {
  background-color: thistle;
  
}
/* Los selectores tanto general como adyacentes, van a aplicar a los elementos que son hermanos y!!! que esten por debajo del elemento de referencia sin incorporar a este ultimo */
.hermanos-general ~ li {
  background-color: thistle;
}
/* En adyacente va a aplicar los estilos al primer elemento que coincida  con el descrito y que tenga esa etiqueta, si el siguiente elmento hermano adyacente no tiene dicha etiqueta no funcionara aunque el 2 adyacente si la tenga*/
.hermanos-adyacentes + li{
  background-color: thistle;
}

/* Selectores def atributos(href es un atributo por ejemplo) el espacio en blanco significa que es el selector de hijos descendientes a continuacion es para decir a los enlaces que sean hijos del nav ue tiene la clase de selectores-atributos y hace referencia a los enlaces(a) que tienen el atributo href, recordar que estos enlaces son hijos del nav ya que hay un (espacio=descendietnes directos(creO))*/

.selectores-atributos a[href]{
  color: orangered;

}
/* Aqui tambien estoy poniendole el tipo de valor que tiene dicho atributo aparte de este */
.selectores-atributos a[target="_blank"]{
  font-weight: bold;
}
/* el asterisco sirve como para decirle que contenga dicho valor (solo contener,puede ser todo el valor o una parte) */
/* El comodin del * palica el estilo si contiene la palabra en cuestion */
.selectores-atributos a[href*="jonmircha"]{
  font-size: 24px;
}
/* el cricunflejo(^) antes del igual al referirse a un atributo nos indica que el estilo se va a aplicar siempre y cuando el atributo empiece con ese valor o caracteristicas  */
.selectores-atributos a[href^="http:"]{
  text-decoration: none;
}

/* El comodin del $ aplica el estilo si contiene el texto en cuestion al final */
.selectores-atributos a[href$=".com"]{
  background-color: black;
}
/* El comodin del ~ aplica el estilo si contiene el texto en cuestion en una lista separada por espacios dentro de las clases es decir si dicho texto es una de sus clases independientemente, me refiero que si pone cursos-casa no funcionara solo si esta cursos y espacio o final*/
.selectores-atributos a[class~="cursos"]{
  background-color: midnightblue;
}
/* El comodin del | aplica el estilo si contiene el texto en cuestion en una lista separada por espacios y que despues del texto en cuestion viene un guion medio - puede haber un guien dentro es decir menu-item y luego del item en el html seria menu-item-casa por ejemplo si funcionaria*/
.selectores-atributos a[class|="menu"]{
  font-style: italic;
}

/* Selector Universal */
/* -Si pongo el * y llaves dichos estilos va  a aplicar a todos lo s elemntos que tenga dentro de mi documento o que se ecnuentren dentor del elemento mencionado */
*{
  font-family: sans-serif;
}

.selector-universal *{
  font-size: 24px;
}

/* Pseudoclases - Dan estilos dependiendo del contexto,posicion o estado del elmento
-https://developer.mozilla.org/es/docs/Web/CSS/pseudo-classes
 */
/* Las pseudoclases se van a distinguir porque llevan : antes de esta */
 .form-pseudoclases *:required{
  border-color: yellow;
 }

 .form-pseudoclases *:valid{
  border-color: green;
 }
 .form-pseudoclases *:invalid{
  border-color: red;
 }
 
 .form-pseudoclases *:focus{
  background-color: skyblue;
 }
 .form-pseudoclases *:disabled{
  background-color: pink;
 }
 .menu-pseudoclases a:visited{
    color: olive;
 }
 /* El estado hover al ser un estado reactivo deberia ir al final ya que sino podria ser machacado por jerarquia
 :link
 :active
 :hover */
 .menu-pseudoclases a:hover{
    color: orange;
 }

 .p-pseudoclases:hover{

  font-size: 20px;

 }
/* Esto es cuando el link sea el del article esta activo se pone el background si cambio la url por ejemplo a otro tema pues se lo quita  */
 #temario-css:target{
  background-color: lightgreen;
 }
/* esto aplica al primer elemento hijo de ese tipo respecto al padre que tiene la clase es decir el elemento li y el primero */
 .lista-pseudoclases li:first-child{
  color:green;
 }
 .lista-pseudoclases li:last-child{
  color:violet;
 }
 /* en este caso no hace falta poner el li porque aveces!!! no lo respeta es decir yo he puesto un parrafo y haciendo li:nth-child(3) me lo aplica por eso lo dejo solo sin el li en el first y el las si que me los respeta haciendo la necesidad de que sea necesario que sea ese tipo de elemento tambien es necesario para hacere de 4en 4 con el 4n por eso lo de a veces... con el color si que no pasa nada pero con el tama√±o si es necesario el li  */
 .lista-pseudoclases li:nth-child(3){
  color:rgb(66, 45, 100)
 }

 .lista-pseudoclases li:nth-child(4n){
  font-size: 20px;
 }

 .lista-pseudoclases li:nth-child(3n+1){
  font-weight: bold;
 }

 /* para elmentos pares  con el comando even que es par*/
    .lista-pseudoclases li:nth-child(even) {
      background-color: yellow;
    }
/* para elmentos pares  con el comando odd que es impar*/

.lista-pseudoclases li:nth-child(odd){
  background-color: orange;
}
/* Para decir el primer hijo de una elemento especifico usar esto : first-of-type */
.articulo-pseudoclases P:first-of-type{
  background-color: pink;
}
/* Para decir el ultimo hijo de un elemento especifica usar esto : last-of-type */
.articulo-pseudoclases P:last-of-type {
  background-color: violet;

}
/* Tambien tenemos para nth-of-type */

.articulo-pseudoclases P:nth-of-type(3) {
  background-color: fuchsia;
}

/* para decir todos los hijos pero quitandole un tipo de elemento, aplica los estilos a todos los hijos excepto los que estan en parentesis se pueden poner varios, se pueden poner clases como por ejemplo seria not(p, .lista, .buton) */
.articulo-pseudoclases *:not(p){
  background-color: beige;
}

/* 
Pseudoelementos-Dan estilos a partes especificas de un elemento, se usa el :: para diferenciarlos de las pseudoclases 
https: //developer.mozilla.org/es/docs/Web/CSS/Pseudo-elements*/

/* ::after
::before
::first-letter
::first-line
::selection
::backdrop
::placeholder Experimental
::marker Experimental
::spelling-error Experimental
::grammar-error (en-US)  */

.saga-geminis::before{
  content:"ü§º‚Äç‚ôÇÔ∏è"
}

.saga-geminis::after{
  content:"üëæ "
}
.saga-precio::before{
  content: "$";
  font-weight: bold;
}
.saga-precio::after{
  content: "USD";
  font-weight: bold;
}
/* first letter primera letra */
.p-pseudoelementos::first-letter{
  font-weight: bold;
  font-size: 32px;
}
/* first-line primera linea */
.p-pseudoelementos::first-line{
  font-weight: bold;

}
/* cuado seleccionamos le cambiamos el color es en eltras como al cpoiar */
.p-pseudoelementos::selection{
  color: green;
  background-color: black;
}
.input-pseudoelementos::placeholder{
  color: green;
}

/* Agrupar Selectores */
.form-agrupar-selectores input[type=text],
.form-agrupar-selectores input[type=email],
.form-agrupar-selectores textarea{
  border-color: yellow;
  border-width: 2px;
  border-style: dashed;
  background-color: black;
  font-size: 20px;
  display: block;
  width: 300px;
}
/* 
El Algoritmo de CSS: Es la forma en que el navegador aplica los estilos al documento HTML. Es vital entender eeste concepto para que enteidnas como se aplcian y en algunas ocasiones se obreescribern la reglas CSS.
1) La C√°scada.
2) La Especificidad
3) La Herencia

La Cascada es el mecanismo en que el navegador aplica los estilos . Y toma en cuenta lo siguiente en este orden:
  1) El Origen del C√≥digo:
  -El User Agent(Los estilos por defecto del navegador)
  -Personalizaciones del usuario
  -Los estilos del autor

2) La especificidad del Selector
3) Orden de Aparici√≥n
  

La Especificidad es el peso que tiene un selector cuando hay conflicto de estilos. Se calcula de la siguiente forma(sumara 1 por cada uno que tenga:

  Etiquetas y pseudoelementos -------------- 0,0,0,1 (pseudolementos:after::,placeholder,first lane,selection:: etiquetas HTML:input,a,p etc)
  Clases,atributos y pseudoclases ---------- 0,0,1,0 
  Identificadores -------------------------- 0,1,0,0(id)
  Estilos en l√≠nea-------------------------- 1,0,0,0(style dentro del html por ejemlo)
  !imporante ---------------- Rompe la especificidad(etc)


  La herencia, es la capacidad de un selectot de obtener(heredar)los valores de sus ancestros mas cercanos, para aplcarla se usa el valor inherit, si queremos evitarla odemos asignar otro valor o inicializar la propiedad en cuesti√≥n con el valor initial


  https: //web.dev/learn/css/inheritance/#which-properties-are-inheritable
*/

blockquote#cita-marco.cita-marco{
  /* (Etiqueta-id-clase-selector de atributo) */
  background-color: lightsteelblue;
}
blockquote{
  background-color: burlywood;
}

#cita-marco{
  background-color: lightgreen;
}
blockquote.cita-marco{
  background-color: tomato;
}

.cita-marco{
  background-color: cornflowerblue;
}
.cita-marco{
  background-color: mediumaquamarine !important;
}
blockquote#cita-marco{
  background-color: lightsalmon;
}
.cita-marco {
  background-color: moccasin !important;
  background-color: darkorange !important;
  font-size: 32px;
  border-style: dotted;
  border-color: red;
}
.cita-marco cite{
  background-color: pink;
  background-color: inherit;
  font-size: 24px;
  font-size: initial;
  border-style: inherit;
  border-color: inherit;
}

/* 
https://autoprefixer.github.io/
https://caniuse.com/
Prefijos de los navegadores
-webkit-user-select: none;
-moz-user-select: none;
-ms-user-select: none;
user-sekect: none;
*/